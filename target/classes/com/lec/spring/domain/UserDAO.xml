<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lec.spring.domain.UserDAO">

	<insert id="insert" parameterType="com.lec.spring.domain.UserDTO" flushCache="true"
			useGeneratedKeys="true" keyColumn="uid" keyProperty="uid">
		INSERT INTO t_member (username, password, name, email, mobile)
		VALUES (#{username}, #{password}, #{name}, #{email}, #{mobile})
	</insert>
	
	<select id="countByUsername" parameterType="String" resultType="com.lec.spring.domain.Count">
		SELECT
			count(username) "count"
		FROM
			t_member
		WHERE
			username = #{username}
	</select>
	
	<select id="countByNickname" parameterType="String" resultType="com.lec.spring.domain.Count">
		SELECT
			count(mobile) "count"
		FROM
			t_member
		WHERE
			nickname = #{nickname}
	</select>
	
	<select id="countByEmail" parameterType="String" resultType="com.lec.spring.domain.Count">
		SELECT
			count(email) "count"
		FROM
			t_member
		WHERE
			email = #{email}
	</select>
	
	<select id="selectByUsername" parameterType="String" resultType="com.lec.spring.domain.UserDTO">
		SELECT
			uid "uid",
			username "username",
			password "password",
			name "name",
			email "email",
			mobile "mobile",
			enabled "enabled",
			regdate "regDate"
		FROM
			t_member
		WHERE
			username = #{username}
	</select>
	
	<select id="selectUsernameByNameEmail" parameterType="com.lec.spring.domain.UserDTO" resultType="String">
		SELECT
			username "username"
		FROM
			t_member
		WHERE
			name = #{name} AND email = #{email}
	</select>
	
	<select id="selectByUsernameEmail" parameterType="com.lec.spring.domain.UserDTO" resultType="com.lec.spring.domain.UserDTO">
		SELECT
			uid "uid",
			username "username",
			password "password",
			name "name",
			email "email",
			mobile "mobile",
			enabled "enabled",
			regdate "regDate"
		FROM
			t_member
		WHERE
			username = #{username} AND email = #{email}
	</select>
	
	<update id="updatePassword" parameterType="com.lec.spring.domain.UserDTO" flushCache="true">
		UPDATE
			t_member
		SET
			password = #{password}
		WHERE
			username = #{username} AND email=#{email}
	</update>
	
	<update id="update" parameterType="com.lec.spring.domain.UserDTO" flushCache="true">
		UPDATE
			t_member
		SET
			nickname = #{nickname},
			mobile = #{mobile}
		WHERE
			uid = #{uid}
	</update>

	<select id="selectByUsernameLike" parameterType="String" resultType="com.lec.spring.domain.UserDTO">
		SELECT
			uid "uid",
			username "username",
			password "password",
			name "name",
			email "email",
			mobile "mobile",
			enabled "enabled",
			regdate "regDate"
		FROM
			t_member
		WHERE
			username LIKE "%#{searchKey}%"
	</select>
	
	<insert id="insertAuth" flushCache="true">
		INSERT INTO t_authority (mb_uid, auth)
		VALUES (#{param1}, #{param2})
	</insert>

	<select id="selectAuthsByUsername" parameterType="String" resultType="com.lec.spring.domain.AuthDTO">
		SELECT 
			username "username",
			auth "auth"
		FROM
			(select tm.username username, ta.auth auth
			from t_member tm inner join t_authority ta
			where tm.uid = ta.mb_uid) tm_ta
		WHERE
			username = #{param1} 
	</select>
	
	
	<delete id="deleteAuth" flushCache="true">
		delete from
			t_authority
		where
			mb_uid = 
				(select uid
				from t_member 
				where username = #{param1})
			and auth = #{param2};
	</delete>
	
	
	<delete id="deleteAllAuths" flushCache="true">
		delete from
			t_authority
		where
			mb_uid = 
				(select uid
				from t_member 
				where username = #{param1})
	</delete>
	
	<delete id="delete" parameterType="com.lec.spring.domain.UserDTO" flushCache="true">
		DELETE FROM t_member
		WHERE uid = #{uid}
	</delete>
	
</mapper>